# To display the perf.data header info, please use --header/--header-only options.
#
#
# Total Lost Samples: 0
#
# Samples: 38  of event 'cycles:Pu'
# Event count (approx.): 14881657
#
# Children      Self  Command  Shared Object         Symbol                                                                                                                                                                                                                                                                                                                                                                                             
# ........  ........  .......  ....................  ...................................................................................................................................................................................................................................................................................................................................................................................................
#
    55.98%     0.00%  demo     libasan.so.8.0.0      [.] __sanitizer::internal_clone(int (*)(void*), void*, int, void*, int*, void*, int*)
            |
            ---__sanitizer::internal_clone(int (*)(void*), void*, int, void*, int*, void*, int*)
               __sanitizer::TracerThread(void*)
               __lsan::CheckForLeaksCallback(__sanitizer::SuspendedThreadsList const&, void*)
               |          
               |--36.32%--dl_iterate_phdr
               |          __lsan::ProcessGlobalRegionsCallback(dl_phdr_info*, unsigned long, void*)
               |          __lsan::ScanGlobalRange(unsigned long, unsigned long, __sanitizer::InternalMmapVector<unsigned long>*)
               |          void __lsan::ScanForPointers<__lsan::(anonymous namespace)::DirectMemoryAccessor>(unsigned long, unsigned long, __sanitizer::InternalMmapVector<unsigned long>*, char const*, __lsan::ChunkTag, __lsan::(anonymous namespace)::DirectMemoryAccessor&) [clone .isra.0]
               |          |          
               |           --2.11%--__sanitizer::LargeMmapAllocator<__asan::AsanMapUnmapCallback, __sanitizer::LargeMmapAllocatorPtrArrayDynamic, __sanitizer::LocalAddressSpaceView>::GetBlockBeginFastLocked(void const*)
               |          
               |--18.81%--__lsan::ForEachChunk(void (*)(unsigned long, void*), void*)
               |          |          
               |          |--5.65%--__lsan::CollectIgnoredCb(unsigned long, void*)
               |          |          __lsan::GetUserBegin(unsigned long)
               |          |          
               |          |--4.50%--__lsan::LsanMetadata::allocated() const
               |          |          
               |           --4.36%--__lsan::LsanMetadata::LsanMetadata(unsigned long)
               |          
                --0.84%--__lsan::CollectIgnoredCb(unsigned long, void*)

    55.98%     0.00%  demo     libasan.so.8.0.0      [.] __sanitizer::TracerThread(void*)
            |
            ---__sanitizer::TracerThread(void*)
               __lsan::CheckForLeaksCallback(__sanitizer::SuspendedThreadsList const&, void*)
               |          
               |--36.32%--dl_iterate_phdr
               |          __lsan::ProcessGlobalRegionsCallback(dl_phdr_info*, unsigned long, void*)
               |          __lsan::ScanGlobalRange(unsigned long, unsigned long, __sanitizer::InternalMmapVector<unsigned long>*)
               |          void __lsan::ScanForPointers<__lsan::(anonymous namespace)::DirectMemoryAccessor>(unsigned long, unsigned long, __sanitizer::InternalMmapVector<unsigned long>*, char const*, __lsan::ChunkTag, __lsan::(anonymous namespace)::DirectMemoryAccessor&) [clone .isra.0]
               |          |          
               |           --2.11%--__sanitizer::LargeMmapAllocator<__asan::AsanMapUnmapCallback, __sanitizer::LargeMmapAllocatorPtrArrayDynamic, __sanitizer::LocalAddressSpaceView>::GetBlockBeginFastLocked(void const*)
               |          
               |--18.81%--__lsan::ForEachChunk(void (*)(unsigned long, void*), void*)
               |          |          
               |          |--5.65%--__lsan::CollectIgnoredCb(unsigned long, void*)
               |          |          __lsan::GetUserBegin(unsigned long)
               |          |          
               |          |--4.50%--__lsan::LsanMetadata::allocated() const
               |          |          
               |           --4.36%--__lsan::LsanMetadata::LsanMetadata(unsigned long)
               |          
                --0.84%--__lsan::CollectIgnoredCb(unsigned long, void*)

    55.98%     0.00%  demo     libasan.so.8.0.0      [.] __lsan::CheckForLeaksCallback(__sanitizer::SuspendedThreadsList const&, void*)
            |
            ---__lsan::CheckForLeaksCallback(__sanitizer::SuspendedThreadsList const&, void*)
               |          
               |--36.32%--dl_iterate_phdr
               |          __lsan::ProcessGlobalRegionsCallback(dl_phdr_info*, unsigned long, void*)
               |          __lsan::ScanGlobalRange(unsigned long, unsigned long, __sanitizer::InternalMmapVector<unsigned long>*)
               |          void __lsan::ScanForPointers<__lsan::(anonymous namespace)::DirectMemoryAccessor>(unsigned long, unsigned long, __sanitizer::InternalMmapVector<unsigned long>*, char const*, __lsan::ChunkTag, __lsan::(anonymous namespace)::DirectMemoryAccessor&) [clone .isra.0]
               |          |          
               |           --2.11%--__sanitizer::LargeMmapAllocator<__asan::AsanMapUnmapCallback, __sanitizer::LargeMmapAllocatorPtrArrayDynamic, __sanitizer::LocalAddressSpaceView>::GetBlockBeginFastLocked(void const*)
               |          
               |--18.81%--__lsan::ForEachChunk(void (*)(unsigned long, void*), void*)
               |          |          
               |          |--5.65%--__lsan::CollectIgnoredCb(unsigned long, void*)
               |          |          __lsan::GetUserBegin(unsigned long)
               |          |          
               |          |--4.50%--__lsan::LsanMetadata::allocated() const
               |          |          
               |           --4.36%--__lsan::LsanMetadata::LsanMetadata(unsigned long)
               |          
                --0.84%--__lsan::CollectIgnoredCb(unsigned long, void*)

    43.13%     0.00%  demo     libc.so.6             [.] dl_iterate_phdr
            |
            ---dl_iterate_phdr
               |          
               |--36.32%--__lsan::ProcessGlobalRegionsCallback(dl_phdr_info*, unsigned long, void*)
               |          __lsan::ScanGlobalRange(unsigned long, unsigned long, __sanitizer::InternalMmapVector<unsigned long>*)
               |          void __lsan::ScanForPointers<__lsan::(anonymous namespace)::DirectMemoryAccessor>(unsigned long, unsigned long, __sanitizer::InternalMmapVector<unsigned long>*, char const*, __lsan::ChunkTag, __lsan::(anonymous namespace)::DirectMemoryAccessor&) [clone .isra.0]
               |          |          
               |           --2.11%--__sanitizer::LargeMmapAllocator<__asan::AsanMapUnmapCallback, __sanitizer::LargeMmapAllocatorPtrArrayDynamic, __sanitizer::LocalAddressSpaceView>::GetBlockBeginFastLocked(void const*)
               |          
                --6.80%--__sanitizer::dl_iterate_phdr_cb(dl_phdr_info*, unsigned long, void*)
                          __sanitizer::AddModuleSegments(char const*, dl_phdr_info*, __sanitizer::InternalMmapVectorNoCtor<__sanitizer::LoadedModule, false>*) [clone .part.0]
                          __sanitizer::LoadedModule::set(char const*, unsigned long)
                          __sanitizer::internal_strdup(char const*)
                          __sanitizer::InternalAlloc(unsigned long, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
                          __sanitizer::CombinedAllocator<__sanitizer::SizeClassAllocator32<__sanitizer::AP32>, __sanitizer::LargeMmapAllocatorPtrArrayStatic>::Allocate(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long, unsigned long)
                          __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)
                          __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::AllocateBatch(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
                          __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::PopulateFreeList(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::SizeClassInfo*, unsigned long)
                          |          
                           --3.51%--__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)

    36.32%    34.21%  demo     libasan.so.8.0.0      [.] void __lsan::ScanForPointers<__lsan::(anonymous namespace)::DirectMemoryAccessor>(unsigned long, unsigned long, __sanitizer::InternalMmapVector<unsigned long>*, char const*, __lsan::ChunkTag, __lsan::(anonymous namespace)::DirectMemoryAccessor&) [clone .isra.0]
            |          
            |--34.21%--__sanitizer::internal_clone(int (*)(void*), void*, int, void*, int*, void*, int*)
            |          __sanitizer::TracerThread(void*)
            |          __lsan::CheckForLeaksCallback(__sanitizer::SuspendedThreadsList const&, void*)
            |          dl_iterate_phdr
            |          __lsan::ProcessGlobalRegionsCallback(dl_phdr_info*, unsigned long, void*)
            |          __lsan::ScanGlobalRange(unsigned long, unsigned long, __sanitizer::InternalMmapVector<unsigned long>*)
            |          void __lsan::ScanForPointers<__lsan::(anonymous namespace)::DirectMemoryAccessor>(unsigned long, unsigned long, __sanitizer::InternalMmapVector<unsigned long>*, char const*, __lsan::ChunkTag, __lsan::(anonymous namespace)::DirectMemoryAccessor&) [clone .isra.0]
            |          
             --2.11%--void __lsan::ScanForPointers<__lsan::(anonymous namespace)::DirectMemoryAccessor>(unsigned long, unsigned long, __sanitizer::InternalMmapVector<unsigned long>*, char const*, __lsan::ChunkTag, __lsan::(anonymous namespace)::DirectMemoryAccessor&) [clone .isra.0]
                       __sanitizer::LargeMmapAllocator<__asan::AsanMapUnmapCallback, __sanitizer::LargeMmapAllocatorPtrArrayDynamic, __sanitizer::LocalAddressSpaceView>::GetBlockBeginFastLocked(void const*)

    36.32%     0.00%  demo     libasan.so.8.0.0      [.] __lsan::ProcessGlobalRegionsCallback(dl_phdr_info*, unsigned long, void*)
            |
            ---__lsan::ProcessGlobalRegionsCallback(dl_phdr_info*, unsigned long, void*)
               __lsan::ScanGlobalRange(unsigned long, unsigned long, __sanitizer::InternalMmapVector<unsigned long>*)
               void __lsan::ScanForPointers<__lsan::(anonymous namespace)::DirectMemoryAccessor>(unsigned long, unsigned long, __sanitizer::InternalMmapVector<unsigned long>*, char const*, __lsan::ChunkTag, __lsan::(anonymous namespace)::DirectMemoryAccessor&) [clone .isra.0]
               |          
                --2.11%--__sanitizer::LargeMmapAllocator<__asan::AsanMapUnmapCallback, __sanitizer::LargeMmapAllocatorPtrArrayDynamic, __sanitizer::LocalAddressSpaceView>::GetBlockBeginFastLocked(void const*)

    36.32%     0.00%  demo     libasan.so.8.0.0      [.] __lsan::ScanGlobalRange(unsigned long, unsigned long, __sanitizer::InternalMmapVector<unsigned long>*)
            |
            ---__lsan::ScanGlobalRange(unsigned long, unsigned long, __sanitizer::InternalMmapVector<unsigned long>*)
               void __lsan::ScanForPointers<__lsan::(anonymous namespace)::DirectMemoryAccessor>(unsigned long, unsigned long, __sanitizer::InternalMmapVector<unsigned long>*, char const*, __lsan::ChunkTag, __lsan::(anonymous namespace)::DirectMemoryAccessor&) [clone .isra.0]
               |          
                --2.11%--__sanitizer::LargeMmapAllocator<__asan::AsanMapUnmapCallback, __sanitizer::LargeMmapAllocatorPtrArrayDynamic, __sanitizer::LocalAddressSpaceView>::GetBlockBeginFastLocked(void const*)

    22.37%     0.00%  demo     ld-linux-x86-64.so.2  [.] 0x00007fcc0743fba0
            |
            ---0x7fcc0743fba0
               0x7fcc074273cf
               __asan::AsanInitFromRtl()
               __asan::AsanInitInternal() [clone .isra.0]
               |          
               |--15.57%--__asan::InitializeAsanInterceptors()
               |          InitializeCommonInterceptors()
               |          |          
               |          |--9.05%--__interception::InterceptFunction(char const*, unsigned long*, unsigned long, unsigned long)
               |          |          dlsym
               |          |          |          
               |          |          |--5.99%--0x7fcc060927f3
               |          |          |          0x7fcc074235a9
               |          |          |          _dl_catch_exception
               |          |          |          0x7fcc06092e00
               |          |          |          0x7fcc0616a086
               |          |          |          |          
               |          |          |          |--3.13%--0x7fcc0742c8c2
               |          |          |          |          0x7fcc0742bc80
               |          |          |          |          
               |          |          |           --2.86%--0x7fcc0742cb6c
               |          |          |                     _dl_exception_create_format
               |          |          |                     ___interceptor_malloc
               |          |          |                     __sanitizer::InternalAlloc(unsigned long, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
               |          |          |                     __sanitizer_internal_memset
               |          |          |          
               |          |           --3.06%--0x7fcc06092820
               |          |                     ___interceptor_malloc
               |          |                     __sanitizer::InternalAlloc(unsigned long, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
               |          |                     __sanitizer::CombinedAllocator<__sanitizer::SizeClassAllocator32<__sanitizer::AP32>, __sanitizer::LargeMmapAllocatorPtrArrayStatic>::Allocate(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long, unsigned long)
               |          |                     __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)
               |          |                     __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::AllocateBatch(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
               |          |                     __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::PopulateFreeList(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::SizeClassInfo*, unsigned long)
               |          |          
               |           --3.07%--ioctl_init()
               |          
                --6.80%--__lsan::InitializePlatformSpecificModules()
                          __sanitizer::ListOfModules::init()
                          dl_iterate_phdr
                          __sanitizer::dl_iterate_phdr_cb(dl_phdr_info*, unsigned long, void*)
                          __sanitizer::AddModuleSegments(char const*, dl_phdr_info*, __sanitizer::InternalMmapVectorNoCtor<__sanitizer::LoadedModule, false>*) [clone .part.0]
                          __sanitizer::LoadedModule::set(char const*, unsigned long)
                          __sanitizer::internal_strdup(char const*)
                          __sanitizer::InternalAlloc(unsigned long, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
                          __sanitizer::CombinedAllocator<__sanitizer::SizeClassAllocator32<__sanitizer::AP32>, __sanitizer::LargeMmapAllocatorPtrArrayStatic>::Allocate(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long, unsigned long)
                          __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)
                          __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::AllocateBatch(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
                          __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::PopulateFreeList(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::SizeClassInfo*, unsigned long)
                          |          
                           --3.51%--__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)

    22.37%     0.00%  demo     ld-linux-x86-64.so.2  [.] 0x00007fcc074273cf
            |
            ---0x7fcc074273cf
               __asan::AsanInitFromRtl()
               __asan::AsanInitInternal() [clone .isra.0]
               |          
               |--15.57%--__asan::InitializeAsanInterceptors()
               |          InitializeCommonInterceptors()
               |          |          
               |          |--9.05%--__interception::InterceptFunction(char const*, unsigned long*, unsigned long, unsigned long)
               |          |          dlsym
               |          |          |          
               |          |          |--5.99%--0x7fcc060927f3
               |          |          |          0x7fcc074235a9
               |          |          |          _dl_catch_exception
               |          |          |          0x7fcc06092e00
               |          |          |          0x7fcc0616a086
               |          |          |          |          
               |          |          |          |--3.13%--0x7fcc0742c8c2
               |          |          |          |          0x7fcc0742bc80
               |          |          |          |          
               |          |          |           --2.86%--0x7fcc0742cb6c
               |          |          |                     _dl_exception_create_format
               |          |          |                     ___interceptor_malloc
               |          |          |                     __sanitizer::InternalAlloc(unsigned long, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
               |          |          |                     __sanitizer_internal_memset
               |          |          |          
               |          |           --3.06%--0x7fcc06092820
               |          |                     ___interceptor_malloc
               |          |                     __sanitizer::InternalAlloc(unsigned long, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
               |          |                     __sanitizer::CombinedAllocator<__sanitizer::SizeClassAllocator32<__sanitizer::AP32>, __sanitizer::LargeMmapAllocatorPtrArrayStatic>::Allocate(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long, unsigned long)
               |          |                     __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)
               |          |                     __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::AllocateBatch(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
               |          |                     __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::PopulateFreeList(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::SizeClassInfo*, unsigned long)
               |          |          
               |           --3.07%--ioctl_init()
               |          
                --6.80%--__lsan::InitializePlatformSpecificModules()
                          __sanitizer::ListOfModules::init()
                          dl_iterate_phdr
                          __sanitizer::dl_iterate_phdr_cb(dl_phdr_info*, unsigned long, void*)
                          __sanitizer::AddModuleSegments(char const*, dl_phdr_info*, __sanitizer::InternalMmapVectorNoCtor<__sanitizer::LoadedModule, false>*) [clone .part.0]
                          __sanitizer::LoadedModule::set(char const*, unsigned long)
                          __sanitizer::internal_strdup(char const*)
                          __sanitizer::InternalAlloc(unsigned long, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
                          __sanitizer::CombinedAllocator<__sanitizer::SizeClassAllocator32<__sanitizer::AP32>, __sanitizer::LargeMmapAllocatorPtrArrayStatic>::Allocate(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long, unsigned long)
                          __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)
                          __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::AllocateBatch(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
                          __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::PopulateFreeList(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::SizeClassInfo*, unsigned long)
                          |          
                           --3.51%--__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)

    22.37%     0.00%  demo     libasan.so.8.0.0      [.] __asan::AsanInitFromRtl()
            |
            ---__asan::AsanInitFromRtl()
               __asan::AsanInitInternal() [clone .isra.0]
               |          
               |--15.57%--__asan::InitializeAsanInterceptors()
               |          InitializeCommonInterceptors()
               |          |          
               |          |--9.05%--__interception::InterceptFunction(char const*, unsigned long*, unsigned long, unsigned long)
               |          |          dlsym
               |          |          |          
               |          |          |--5.99%--0x7fcc060927f3
               |          |          |          0x7fcc074235a9
               |          |          |          _dl_catch_exception
               |          |          |          0x7fcc06092e00
               |          |          |          0x7fcc0616a086
               |          |          |          |          
               |          |          |          |--3.13%--0x7fcc0742c8c2
               |          |          |          |          0x7fcc0742bc80
               |          |          |          |          
               |          |          |           --2.86%--0x7fcc0742cb6c
               |          |          |                     _dl_exception_create_format
               |          |          |                     ___interceptor_malloc
               |          |          |                     __sanitizer::InternalAlloc(unsigned long, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
               |          |          |                     __sanitizer_internal_memset
               |          |          |          
               |          |           --3.06%--0x7fcc06092820
               |          |                     ___interceptor_malloc
               |          |                     __sanitizer::InternalAlloc(unsigned long, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
               |          |                     __sanitizer::CombinedAllocator<__sanitizer::SizeClassAllocator32<__sanitizer::AP32>, __sanitizer::LargeMmapAllocatorPtrArrayStatic>::Allocate(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long, unsigned long)
               |          |                     __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)
               |          |                     __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::AllocateBatch(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
               |          |                     __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::PopulateFreeList(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::SizeClassInfo*, unsigned long)
               |          |          
               |           --3.07%--ioctl_init()
               |          
                --6.80%--__lsan::InitializePlatformSpecificModules()
                          __sanitizer::ListOfModules::init()
                          dl_iterate_phdr
                          __sanitizer::dl_iterate_phdr_cb(dl_phdr_info*, unsigned long, void*)
                          __sanitizer::AddModuleSegments(char const*, dl_phdr_info*, __sanitizer::InternalMmapVectorNoCtor<__sanitizer::LoadedModule, false>*) [clone .part.0]
                          __sanitizer::LoadedModule::set(char const*, unsigned long)
                          __sanitizer::internal_strdup(char const*)
                          __sanitizer::InternalAlloc(unsigned long, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
                          __sanitizer::CombinedAllocator<__sanitizer::SizeClassAllocator32<__sanitizer::AP32>, __sanitizer::LargeMmapAllocatorPtrArrayStatic>::Allocate(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long, unsigned long)
                          __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)
                          __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::AllocateBatch(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
                          __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::PopulateFreeList(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::SizeClassInfo*, unsigned long)
                          |          
                           --3.51%--__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)

    22.37%     0.00%  demo     libasan.so.8.0.0      [.] __asan::AsanInitInternal() [clone .isra.0]
            |
            ---__asan::AsanInitInternal() [clone .isra.0]
               |          
               |--15.57%--__asan::InitializeAsanInterceptors()
               |          InitializeCommonInterceptors()
               |          |          
               |          |--9.05%--__interception::InterceptFunction(char const*, unsigned long*, unsigned long, unsigned long)
               |          |          dlsym
               |          |          |          
               |          |          |--5.99%--0x7fcc060927f3
               |          |          |          0x7fcc074235a9
               |          |          |          _dl_catch_exception
               |          |          |          0x7fcc06092e00
               |          |          |          0x7fcc0616a086
               |          |          |          |          
               |          |          |          |--3.13%--0x7fcc0742c8c2
               |          |          |          |          0x7fcc0742bc80
               |          |          |          |          
               |          |          |           --2.86%--0x7fcc0742cb6c
               |          |          |                     _dl_exception_create_format
               |          |          |                     ___interceptor_malloc
               |          |          |                     __sanitizer::InternalAlloc(unsigned long, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
               |          |          |                     __sanitizer_internal_memset
               |          |          |          
               |          |           --3.06%--0x7fcc06092820
               |          |                     ___interceptor_malloc
               |          |                     __sanitizer::InternalAlloc(unsigned long, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
               |          |                     __sanitizer::CombinedAllocator<__sanitizer::SizeClassAllocator32<__sanitizer::AP32>, __sanitizer::LargeMmapAllocatorPtrArrayStatic>::Allocate(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long, unsigned long)
               |          |                     __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)
               |          |                     __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::AllocateBatch(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
               |          |                     __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::PopulateFreeList(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::SizeClassInfo*, unsigned long)
               |          |          
               |           --3.07%--ioctl_init()
               |          
                --6.80%--__lsan::InitializePlatformSpecificModules()
                          __sanitizer::ListOfModules::init()
                          dl_iterate_phdr
                          __sanitizer::dl_iterate_phdr_cb(dl_phdr_info*, unsigned long, void*)
                          __sanitizer::AddModuleSegments(char const*, dl_phdr_info*, __sanitizer::InternalMmapVectorNoCtor<__sanitizer::LoadedModule, false>*) [clone .part.0]
                          __sanitizer::LoadedModule::set(char const*, unsigned long)
                          __sanitizer::internal_strdup(char const*)
                          __sanitizer::InternalAlloc(unsigned long, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
                          __sanitizer::CombinedAllocator<__sanitizer::SizeClassAllocator32<__sanitizer::AP32>, __sanitizer::LargeMmapAllocatorPtrArrayStatic>::Allocate(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long, unsigned long)
                          __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)
                          __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::AllocateBatch(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
                          __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::PopulateFreeList(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::SizeClassInfo*, unsigned long)
                          |          
                           --3.51%--__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)

    18.81%     4.31%  demo     libasan.so.8.0.0      [.] __lsan::ForEachChunk(void (*)(unsigned long, void*), void*)
            |          
            |--14.50%--__lsan::ForEachChunk(void (*)(unsigned long, void*), void*)
            |          |          
            |          |--5.65%--__lsan::CollectIgnoredCb(unsigned long, void*)
            |          |          __lsan::GetUserBegin(unsigned long)
            |          |          
            |          |--4.50%--__lsan::LsanMetadata::allocated() const
            |          |          
            |           --4.36%--__lsan::LsanMetadata::LsanMetadata(unsigned long)
            |          
             --4.31%--__sanitizer::internal_clone(int (*)(void*), void*, int, void*, int*, void*, int*)
                       __sanitizer::TracerThread(void*)
                       __lsan::CheckForLeaksCallback(__sanitizer::SuspendedThreadsList const&, void*)
                       __lsan::ForEachChunk(void (*)(unsigned long, void*), void*)

    18.46%     0.00%  demo     ld-linux-x86-64.so.2  [.] 0x00007fcc0743fb48
            |
            ---0x7fcc0743fb48
               0x7fcc07440ca1
               0x7fcc0743f5e6
               |          
               |--15.97%--0x7fcc07442d23
               |          0x7fcc07432e21
               |          |          
               |          |--12.00%--0x7fcc07430e10
               |          |          |          
               |          |          |--4.28%--0x7fcc0742c8c2
               |          |          |          |          
               |          |          |          |--3.24%--0x7fcc0742bf76
               |          |          |          |          
               |          |          |           --1.04%--0x7fcc0742bf64
               |          |          |          
               |          |          |--2.93%--0x7fcc0742c8c6
               |          |          |          
               |          |          |--2.59%--0x7fcc0742c7bb
               |          |          |          
               |          |           --2.21%--0x7fcc0742c7d4
               |          |          
               |          |--1.83%--0x7fcc07430d00
               |          |          
               |          |--1.33%--0x7fcc07430d52
               |          |          
               |           --0.80%--0x7fcc074306e3
               |          
               |--0.84%--0x7fcc07442b0d
               |          0x7fcc07423359
               |          0x7fcc07440344
               |          0x7fcc074366c0
               |          0x7fcc074478f3
               |          
               |--0.84%--0x7fcc074429b0
               |          0x7fcc07424ca3
               |          _dl_catch_exception
               |          0x7fcc0742483d
               |          0x7fcc0742b870
               |          0x7fcc0742ac72
               |          0x7fcc07447d88
               |          
                --0.81%--0x7fcc07442c79
                          0x7fcc07432e21
                          0x7fcc07430e10
                          0x7fcc0742c8c2
                          0x7fcc0742bd1a

    18.46%     0.00%  demo     ld-linux-x86-64.so.2  [.] 0x00007fcc07440ca1
            |
            ---0x7fcc07440ca1
               0x7fcc0743f5e6
               |          
               |--15.97%--0x7fcc07442d23
               |          0x7fcc07432e21
               |          |          
               |          |--12.00%--0x7fcc07430e10
               |          |          |          
               |          |          |--4.28%--0x7fcc0742c8c2
               |          |          |          |          
               |          |          |          |--3.24%--0x7fcc0742bf76
               |          |          |          |          
               |          |          |           --1.04%--0x7fcc0742bf64
               |          |          |          
               |          |          |--2.93%--0x7fcc0742c8c6
               |          |          |          
               |          |          |--2.59%--0x7fcc0742c7bb
               |          |          |          
               |          |           --2.21%--0x7fcc0742c7d4
               |          |          
               |          |--1.83%--0x7fcc07430d00
               |          |          
               |          |--1.33%--0x7fcc07430d52
               |          |          
               |           --0.80%--0x7fcc074306e3
               |          
               |--0.84%--0x7fcc07442b0d
               |          0x7fcc07423359
               |          0x7fcc07440344
               |          0x7fcc074366c0
               |          0x7fcc074478f3
               |          
               |--0.84%--0x7fcc074429b0
               |          0x7fcc07424ca3
               |          _dl_catch_exception
               |          0x7fcc0742483d
               |          0x7fcc0742b870
               |          0x7fcc0742ac72
               |          0x7fcc07447d88
               |          
                --0.81%--0x7fcc07442c79
                          0x7fcc07432e21
                          0x7fcc07430e10
                          0x7fcc0742c8c2
                          0x7fcc0742bd1a

    18.46%     0.00%  demo     ld-linux-x86-64.so.2  [.] 0x00007fcc0743f5e6
            |
            ---0x7fcc0743f5e6
               |          
               |--15.97%--0x7fcc07442d23
               |          0x7fcc07432e21
               |          |          
               |          |--12.00%--0x7fcc07430e10
               |          |          |          
               |          |          |--4.28%--0x7fcc0742c8c2
               |          |          |          |          
               |          |          |          |--3.24%--0x7fcc0742bf76
               |          |          |          |          
               |          |          |           --1.04%--0x7fcc0742bf64
               |          |          |          
               |          |          |--2.93%--0x7fcc0742c8c6
               |          |          |          
               |          |          |--2.59%--0x7fcc0742c7bb
               |          |          |          
               |          |           --2.21%--0x7fcc0742c7d4
               |          |          
               |          |--1.83%--0x7fcc07430d00
               |          |          
               |          |--1.33%--0x7fcc07430d52
               |          |          
               |           --0.80%--0x7fcc074306e3
               |          
               |--0.84%--0x7fcc07442b0d
               |          0x7fcc07423359
               |          0x7fcc07440344
               |          0x7fcc074366c0
               |          0x7fcc074478f3
               |          
               |--0.84%--0x7fcc074429b0
               |          0x7fcc07424ca3
               |          _dl_catch_exception
               |          0x7fcc0742483d
               |          0x7fcc0742b870
               |          0x7fcc0742ac72
               |          0x7fcc07447d88
               |          
                --0.81%--0x7fcc07442c79
                          0x7fcc07432e21
                          0x7fcc07430e10
                          0x7fcc0742c8c2
                          0x7fcc0742bd1a

    16.78%     0.00%  demo     ld-linux-x86-64.so.2  [.] 0x00007fcc07432e21
            |
            ---0x7fcc07432e21
               |          
               |--12.81%--0x7fcc07430e10
               |          |          
               |          |--5.09%--0x7fcc0742c8c2
               |          |          |          
               |          |          |--3.24%--0x7fcc0742bf76
               |          |          |          
               |          |          |--1.04%--0x7fcc0742bf64
               |          |          |          
               |          |           --0.81%--0x7fcc0742bd1a
               |          |          
               |          |--2.93%--0x7fcc0742c8c6
               |          |          
               |          |--2.59%--0x7fcc0742c7bb
               |          |          
               |           --2.21%--0x7fcc0742c7d4
               |          
               |--1.83%--0x7fcc07430d00
               |          
               |--1.33%--0x7fcc07430d52
               |          
                --0.80%--0x7fcc074306e3

    15.97%     0.00%  demo     ld-linux-x86-64.so.2  [.] 0x00007fcc07442d23
            |
            ---0x7fcc07442d23
               0x7fcc07432e21
               |          
               |--12.00%--0x7fcc07430e10
               |          |          
               |          |--4.28%--0x7fcc0742c8c2
               |          |          |          
               |          |          |--3.24%--0x7fcc0742bf76
               |          |          |          
               |          |           --1.04%--0x7fcc0742bf64
               |          |          
               |          |--2.93%--0x7fcc0742c8c6
               |          |          
               |          |--2.59%--0x7fcc0742c7bb
               |          |          
               |           --2.21%--0x7fcc0742c7d4
               |          
               |--1.83%--0x7fcc07430d00
               |          
               |--1.33%--0x7fcc07430d52
               |          
                --0.80%--0x7fcc074306e3

    15.57%     0.00%  demo     libasan.so.8.0.0      [.] __asan::InitializeAsanInterceptors()
            |
            ---__asan::InitializeAsanInterceptors()
               InitializeCommonInterceptors()
               |          
               |--9.05%--__interception::InterceptFunction(char const*, unsigned long*, unsigned long, unsigned long)
               |          dlsym
               |          |          
               |          |--5.99%--0x7fcc060927f3
               |          |          0x7fcc074235a9
               |          |          _dl_catch_exception
               |          |          0x7fcc06092e00
               |          |          0x7fcc0616a086
               |          |          |          
               |          |          |--3.13%--0x7fcc0742c8c2
               |          |          |          0x7fcc0742bc80
               |          |          |          
               |          |           --2.86%--0x7fcc0742cb6c
               |          |                     _dl_exception_create_format
               |          |                     ___interceptor_malloc
               |          |                     __sanitizer::InternalAlloc(unsigned long, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
               |          |                     __sanitizer_internal_memset
               |          |          
               |           --3.06%--0x7fcc06092820
               |                     ___interceptor_malloc
               |                     __sanitizer::InternalAlloc(unsigned long, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
               |                     __sanitizer::CombinedAllocator<__sanitizer::SizeClassAllocator32<__sanitizer::AP32>, __sanitizer::LargeMmapAllocatorPtrArrayStatic>::Allocate(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long, unsigned long)
               |                     __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)
               |                     __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::AllocateBatch(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
               |                     __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::PopulateFreeList(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::SizeClassInfo*, unsigned long)
               |          
                --3.07%--ioctl_init()

    15.57%     3.44%  demo     libasan.so.8.0.0      [.] InitializeCommonInterceptors()
            |          
            |--12.12%--InitializeCommonInterceptors()
            |          |          
            |          |--9.05%--__interception::InterceptFunction(char const*, unsigned long*, unsigned long, unsigned long)
            |          |          dlsym
            |          |          |          
            |          |          |--5.99%--0x7fcc060927f3
            |          |          |          0x7fcc074235a9
            |          |          |          _dl_catch_exception
            |          |          |          0x7fcc06092e00
            |          |          |          0x7fcc0616a086
            |          |          |          |          
            |          |          |          |--3.13%--0x7fcc0742c8c2
            |          |          |          |          0x7fcc0742bc80
            |          |          |          |          
            |          |          |           --2.86%--0x7fcc0742cb6c
            |          |          |                     _dl_exception_create_format
            |          |          |                     ___interceptor_malloc
            |          |          |                     __sanitizer::InternalAlloc(unsigned long, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
            |          |          |                     __sanitizer_internal_memset
            |          |          |          
            |          |           --3.06%--0x7fcc06092820
            |          |                     ___interceptor_malloc
            |          |                     __sanitizer::InternalAlloc(unsigned long, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
            |          |                     __sanitizer::CombinedAllocator<__sanitizer::SizeClassAllocator32<__sanitizer::AP32>, __sanitizer::LargeMmapAllocatorPtrArrayStatic>::Allocate(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long, unsigned long)
            |          |                     __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)
            |          |                     __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::AllocateBatch(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
            |          |                     __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::PopulateFreeList(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::SizeClassInfo*, unsigned long)
            |          |          
            |           --3.07%--ioctl_init()
            |          
             --3.44%--0x7fcc0743fba0
                       0x7fcc074273cf
                       __asan::AsanInitFromRtl()
                       __asan::AsanInitInternal() [clone .isra.0]
                       __asan::InitializeAsanInterceptors()
                       InitializeCommonInterceptors()

    13.53%    13.53%  demo     [unknown]             [k] 0xffffffffb7a01968
            |          
            |--6.35%--0x7fcc0743fba0
            |          0x7fcc074273cf
            |          __asan::AsanInitFromRtl()
            |          __asan::AsanInitInternal() [clone .isra.0]
            |          |          
            |          |--3.29%--__lsan::InitializePlatformSpecificModules()
            |          |          __sanitizer::ListOfModules::init()
            |          |          dl_iterate_phdr
            |          |          __sanitizer::dl_iterate_phdr_cb(dl_phdr_info*, unsigned long, void*)
            |          |          __sanitizer::AddModuleSegments(char const*, dl_phdr_info*, __sanitizer::InternalMmapVectorNoCtor<__sanitizer::LoadedModule, false>*) [clone .part.0]
            |          |          __sanitizer::LoadedModule::set(char const*, unsigned long)
            |          |          __sanitizer::internal_strdup(char const*)
            |          |          __sanitizer::InternalAlloc(unsigned long, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
            |          |          __sanitizer::CombinedAllocator<__sanitizer::SizeClassAllocator32<__sanitizer::AP32>, __sanitizer::LargeMmapAllocatorPtrArrayStatic>::Allocate(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long, unsigned long)
            |          |          __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)
            |          |          __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::AllocateBatch(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
            |          |          __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::PopulateFreeList(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::SizeClassInfo*, unsigned long)
            |          |          
            |           --3.06%--__asan::InitializeAsanInterceptors()
            |                     InitializeCommonInterceptors()
            |                     __interception::InterceptFunction(char const*, unsigned long*, unsigned long, unsigned long)
            |                     dlsym
            |                     0x7fcc06092820
            |                     ___interceptor_malloc
            |                     __sanitizer::InternalAlloc(unsigned long, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
            |                     __sanitizer::CombinedAllocator<__sanitizer::SizeClassAllocator32<__sanitizer::AP32>, __sanitizer::LargeMmapAllocatorPtrArrayStatic>::Allocate(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long, unsigned long)
            |                     __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)
            |                     __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::AllocateBatch(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
            |                     __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::PopulateFreeList(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::SizeClassInfo*, unsigned long)
            |          
            |--3.20%--_start
            |          __libc_start_main
            |          0x7fcc06027675
            |          main
            |          void Tundra::LnkLst::add_to_end<int, (unsigned char)32>(Tundra::LnkLst::LinkedList<int, (unsigned char)32>*, int)
            |          void Tundra::LnkLst::add_to_end<int, (unsigned char)32>(Tundra::LnkLst::LinkedList<int, (unsigned char)32>*, int const*)
            |          void Tundra::LnkLst::Internal::check_and_handle_resize<int, (unsigned char)32>(Tundra::LnkLst::LinkedList<int, (unsigned char)32>*)
            |          void* Tundra::alloc_and_copy_aligned_mem<(unsigned char)32>(void const*, unsigned long long, unsigned long long)
            |          void* Tundra::alloc_aligned<(unsigned char)32>(unsigned long long)
            |          ___interceptor_posix_memalign
            |          __asan::asan_posix_memalign(void**, unsigned long, unsigned long, __sanitizer::BufferedStackTrace*)
            |          __asan::Allocator::Allocate(unsigned long, unsigned long, __sanitizer::BufferedStackTrace*, __asan::AllocType, bool)
            |          __sanitizer::CombinedAllocator<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >, __sanitizer::LargeMmapAllocatorPtrArrayDynamic>::Allocate(__sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >*, unsigned long, unsigned long)
            |          __sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >::Refill(__sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >::PerClass*, __sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >*, unsigned long)
            |          __sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >::GetFromAllocator(__sanitizer::AllocatorStats*, unsigned long, unsigned int*, unsigned long)
            |          0x7fcc0616e853
            |          
            |--3.18%--__sanitizer::internal_clone(int (*)(void*), void*, int, void*, int*, void*, int*)
            |          __sanitizer::TracerThread(void*)
            |          __lsan::CheckForLeaksCallback(__sanitizer::SuspendedThreadsList const&, void*)
            |          __lsan::ForEachChunk(void (*)(unsigned long, void*), void*)
            |          __lsan::CollectIgnoredCb(unsigned long, void*)
            |          __lsan::GetUserBegin(unsigned long)
            |          
             --0.80%--0x7fcc0743fb48
                       0x7fcc07440ca1
                       0x7fcc0743f5e6
                       0x7fcc07442d23
                       0x7fcc07432e21
                       0x7fcc074306e3

    12.81%     0.00%  demo     ld-linux-x86-64.so.2  [.] 0x00007fcc07430e10
            |
            ---0x7fcc07430e10
               |          
               |--5.09%--0x7fcc0742c8c2
               |          |          
               |          |--3.24%--0x7fcc0742bf76
               |          |          
               |          |--1.04%--0x7fcc0742bf64
               |          |          
               |           --0.81%--0x7fcc0742bd1a
               |          
               |--2.93%--0x7fcc0742c8c6
               |          
               |--2.59%--0x7fcc0742c7bb
               |          
                --2.21%--0x7fcc0742c7d4

    12.73%     0.00%  demo     libasan.so.8.0.0      [.] __sanitizer::InternalAlloc(unsigned long, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
            |
            ---__sanitizer::InternalAlloc(unsigned long, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
               |          
               |--9.87%--__sanitizer::CombinedAllocator<__sanitizer::SizeClassAllocator32<__sanitizer::AP32>, __sanitizer::LargeMmapAllocatorPtrArrayStatic>::Allocate(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long, unsigned long)
               |          __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)
               |          __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::AllocateBatch(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
               |          __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::PopulateFreeList(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::SizeClassInfo*, unsigned long)
               |          |          
               |           --3.51%--__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)
               |          
                --2.86%--__sanitizer_internal_memset

     9.87%     3.51%  demo     libasan.so.8.0.0      [.] __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)
            |          
            |--6.35%--__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)
            |          __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::AllocateBatch(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
            |          __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::PopulateFreeList(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::SizeClassInfo*, unsigned long)
            |          
             --3.51%--0x7fcc0743fba0
                       0x7fcc074273cf
                       __asan::AsanInitFromRtl()
                       __asan::AsanInitInternal() [clone .isra.0]
                       __lsan::InitializePlatformSpecificModules()
                       __sanitizer::ListOfModules::init()
                       dl_iterate_phdr
                       __sanitizer::dl_iterate_phdr_cb(dl_phdr_info*, unsigned long, void*)
                       __sanitizer::AddModuleSegments(char const*, dl_phdr_info*, __sanitizer::InternalMmapVectorNoCtor<__sanitizer::LoadedModule, false>*) [clone .part.0]
                       __sanitizer::LoadedModule::set(char const*, unsigned long)
                       __sanitizer::internal_strdup(char const*)
                       __sanitizer::InternalAlloc(unsigned long, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
                       __sanitizer::CombinedAllocator<__sanitizer::SizeClassAllocator32<__sanitizer::AP32>, __sanitizer::LargeMmapAllocatorPtrArrayStatic>::Allocate(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long, unsigned long)
                       __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)
                       __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::AllocateBatch(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
                       __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::PopulateFreeList(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::SizeClassInfo*, unsigned long)
                       __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)

     9.87%     0.00%  demo     libasan.so.8.0.0      [.] __sanitizer::CombinedAllocator<__sanitizer::SizeClassAllocator32<__sanitizer::AP32>, __sanitizer::LargeMmapAllocatorPtrArrayStatic>::Allocate(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long, unsigned long)
            |
            ---__sanitizer::CombinedAllocator<__sanitizer::SizeClassAllocator32<__sanitizer::AP32>, __sanitizer::LargeMmapAllocatorPtrArrayStatic>::Allocate(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long, unsigned long)
               __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)
               __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::AllocateBatch(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
               __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::PopulateFreeList(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::SizeClassInfo*, unsigned long)
               |          
                --3.51%--__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)

     9.87%     0.00%  demo     libasan.so.8.0.0      [.] __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::AllocateBatch(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
            |
            ---__sanitizer::SizeClassAllocator32<__sanitizer::AP32>::AllocateBatch(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
               __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::PopulateFreeList(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::SizeClassInfo*, unsigned long)
               |          
                --3.51%--__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)

     9.87%     0.00%  demo     libasan.so.8.0.0      [.] __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::PopulateFreeList(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::SizeClassInfo*, unsigned long)
            |
            ---__sanitizer::SizeClassAllocator32<__sanitizer::AP32>::PopulateFreeList(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::SizeClassInfo*, unsigned long)
               |          
                --3.51%--__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)

     9.05%     0.00%  demo     libasan.so.8.0.0      [.] __interception::InterceptFunction(char const*, unsigned long*, unsigned long, unsigned long)
            |
            ---__interception::InterceptFunction(char const*, unsigned long*, unsigned long, unsigned long)
               dlsym
               |          
               |--5.99%--0x7fcc060927f3
               |          0x7fcc074235a9
               |          _dl_catch_exception
               |          0x7fcc06092e00
               |          0x7fcc0616a086
               |          |          
               |          |--3.13%--0x7fcc0742c8c2
               |          |          0x7fcc0742bc80
               |          |          
               |           --2.86%--0x7fcc0742cb6c
               |                     _dl_exception_create_format
               |                     ___interceptor_malloc
               |                     __sanitizer::InternalAlloc(unsigned long, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
               |                     __sanitizer_internal_memset
               |          
                --3.06%--0x7fcc06092820
                          ___interceptor_malloc
                          __sanitizer::InternalAlloc(unsigned long, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
                          __sanitizer::CombinedAllocator<__sanitizer::SizeClassAllocator32<__sanitizer::AP32>, __sanitizer::LargeMmapAllocatorPtrArrayStatic>::Allocate(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long, unsigned long)
                          __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)
                          __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::AllocateBatch(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
                          __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::PopulateFreeList(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::SizeClassInfo*, unsigned long)

     9.05%     0.00%  demo     libc.so.6             [.] dlsym
            |
            ---dlsym
               |          
               |--5.99%--0x7fcc060927f3
               |          0x7fcc074235a9
               |          _dl_catch_exception
               |          0x7fcc06092e00
               |          0x7fcc0616a086
               |          |          
               |          |--3.13%--0x7fcc0742c8c2
               |          |          0x7fcc0742bc80
               |          |          
               |           --2.86%--0x7fcc0742cb6c
               |                     _dl_exception_create_format
               |                     ___interceptor_malloc
               |                     __sanitizer::InternalAlloc(unsigned long, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
               |                     __sanitizer_internal_memset
               |          
                --3.06%--0x7fcc06092820
                          ___interceptor_malloc
                          __sanitizer::InternalAlloc(unsigned long, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
                          __sanitizer::CombinedAllocator<__sanitizer::SizeClassAllocator32<__sanitizer::AP32>, __sanitizer::LargeMmapAllocatorPtrArrayStatic>::Allocate(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long, unsigned long)
                          __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)
                          __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::AllocateBatch(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
                          __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::PopulateFreeList(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::SizeClassInfo*, unsigned long)

     8.22%     0.00%  demo     ld-linux-x86-64.so.2  [.] 0x00007fcc0742c8c2
            |
            ---0x7fcc0742c8c2
               |          
               |--3.24%--0x7fcc0742bf76
               |          
               |--3.13%--0x7fcc0742bc80
               |          
               |--1.04%--0x7fcc0742bf64
               |          
                --0.81%--0x7fcc0742bd1a

     6.83%     0.00%  demo     ld-linux-x86-64.so.2  [.] _dl_catch_exception
            |
            ---_dl_catch_exception
               |          
               |--5.99%--0x7fcc06092e00
               |          0x7fcc0616a086
               |          |          
               |          |--3.13%--0x7fcc0742c8c2
               |          |          0x7fcc0742bc80
               |          |          
               |           --2.86%--0x7fcc0742cb6c
               |                     _dl_exception_create_format
               |                     ___interceptor_malloc
               |                     __sanitizer::InternalAlloc(unsigned long, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
               |                     __sanitizer_internal_memset
               |          
                --0.84%--0x7fcc0742483d
                          0x7fcc0742b870
                          0x7fcc0742ac72
                          0x7fcc07447d88

     6.80%     0.00%  demo     libasan.so.8.0.0      [.] __lsan::InitializePlatformSpecificModules()
            |
            ---__lsan::InitializePlatformSpecificModules()
               __sanitizer::ListOfModules::init()
               dl_iterate_phdr
               __sanitizer::dl_iterate_phdr_cb(dl_phdr_info*, unsigned long, void*)
               __sanitizer::AddModuleSegments(char const*, dl_phdr_info*, __sanitizer::InternalMmapVectorNoCtor<__sanitizer::LoadedModule, false>*) [clone .part.0]
               __sanitizer::LoadedModule::set(char const*, unsigned long)
               __sanitizer::internal_strdup(char const*)
               __sanitizer::InternalAlloc(unsigned long, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
               __sanitizer::CombinedAllocator<__sanitizer::SizeClassAllocator32<__sanitizer::AP32>, __sanitizer::LargeMmapAllocatorPtrArrayStatic>::Allocate(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long, unsigned long)
               __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)
               __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::AllocateBatch(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
               __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::PopulateFreeList(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::SizeClassInfo*, unsigned long)
               |          
                --3.51%--__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)

     6.80%     0.00%  demo     libasan.so.8.0.0      [.] __sanitizer::ListOfModules::init()
            |
            ---__sanitizer::ListOfModules::init()
               dl_iterate_phdr
               __sanitizer::dl_iterate_phdr_cb(dl_phdr_info*, unsigned long, void*)
               __sanitizer::AddModuleSegments(char const*, dl_phdr_info*, __sanitizer::InternalMmapVectorNoCtor<__sanitizer::LoadedModule, false>*) [clone .part.0]
               __sanitizer::LoadedModule::set(char const*, unsigned long)
               __sanitizer::internal_strdup(char const*)
               __sanitizer::InternalAlloc(unsigned long, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
               __sanitizer::CombinedAllocator<__sanitizer::SizeClassAllocator32<__sanitizer::AP32>, __sanitizer::LargeMmapAllocatorPtrArrayStatic>::Allocate(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long, unsigned long)
               __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)
               __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::AllocateBatch(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
               __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::PopulateFreeList(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::SizeClassInfo*, unsigned long)
               |          
                --3.51%--__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)

     6.80%     0.00%  demo     libasan.so.8.0.0      [.] __sanitizer::dl_iterate_phdr_cb(dl_phdr_info*, unsigned long, void*)
            |
            ---__sanitizer::dl_iterate_phdr_cb(dl_phdr_info*, unsigned long, void*)
               __sanitizer::AddModuleSegments(char const*, dl_phdr_info*, __sanitizer::InternalMmapVectorNoCtor<__sanitizer::LoadedModule, false>*) [clone .part.0]
               __sanitizer::LoadedModule::set(char const*, unsigned long)
               __sanitizer::internal_strdup(char const*)
               __sanitizer::InternalAlloc(unsigned long, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
               __sanitizer::CombinedAllocator<__sanitizer::SizeClassAllocator32<__sanitizer::AP32>, __sanitizer::LargeMmapAllocatorPtrArrayStatic>::Allocate(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long, unsigned long)
               __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)
               __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::AllocateBatch(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
               __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::PopulateFreeList(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::SizeClassInfo*, unsigned long)
               |          
                --3.51%--__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)

     6.80%     0.00%  demo     libasan.so.8.0.0      [.] __sanitizer::AddModuleSegments(char const*, dl_phdr_info*, __sanitizer::InternalMmapVectorNoCtor<__sanitizer::LoadedModule, false>*) [clone .part.0]
            |
            ---__sanitizer::AddModuleSegments(char const*, dl_phdr_info*, __sanitizer::InternalMmapVectorNoCtor<__sanitizer::LoadedModule, false>*) [clone .part.0]
               __sanitizer::LoadedModule::set(char const*, unsigned long)
               __sanitizer::internal_strdup(char const*)
               __sanitizer::InternalAlloc(unsigned long, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
               __sanitizer::CombinedAllocator<__sanitizer::SizeClassAllocator32<__sanitizer::AP32>, __sanitizer::LargeMmapAllocatorPtrArrayStatic>::Allocate(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long, unsigned long)
               __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)
               __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::AllocateBatch(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
               __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::PopulateFreeList(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::SizeClassInfo*, unsigned long)
               |          
                --3.51%--__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)

     6.80%     0.00%  demo     libasan.so.8.0.0      [.] __sanitizer::LoadedModule::set(char const*, unsigned long)
            |
            ---__sanitizer::LoadedModule::set(char const*, unsigned long)
               __sanitizer::internal_strdup(char const*)
               __sanitizer::InternalAlloc(unsigned long, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
               __sanitizer::CombinedAllocator<__sanitizer::SizeClassAllocator32<__sanitizer::AP32>, __sanitizer::LargeMmapAllocatorPtrArrayStatic>::Allocate(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long, unsigned long)
               __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)
               __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::AllocateBatch(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
               __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::PopulateFreeList(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::SizeClassInfo*, unsigned long)
               |          
                --3.51%--__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)

     6.80%     0.00%  demo     libasan.so.8.0.0      [.] __sanitizer::internal_strdup(char const*)
            |
            ---__sanitizer::internal_strdup(char const*)
               __sanitizer::InternalAlloc(unsigned long, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
               __sanitizer::CombinedAllocator<__sanitizer::SizeClassAllocator32<__sanitizer::AP32>, __sanitizer::LargeMmapAllocatorPtrArrayStatic>::Allocate(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long, unsigned long)
               __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)
               __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::AllocateBatch(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
               __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::PopulateFreeList(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::SizeClassInfo*, unsigned long)
               |          
                --3.51%--__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)

     6.49%     0.84%  demo     libasan.so.8.0.0      [.] __lsan::CollectIgnoredCb(unsigned long, void*)
            |          
            |--5.65%--__lsan::CollectIgnoredCb(unsigned long, void*)
            |          __lsan::GetUserBegin(unsigned long)
            |          
             --0.84%--__sanitizer::internal_clone(int (*)(void*), void*, int, void*, int*, void*, int*)
                       __sanitizer::TracerThread(void*)
                       __lsan::CheckForLeaksCallback(__sanitizer::SuspendedThreadsList const&, void*)
                       __lsan::CollectIgnoredCb(unsigned long, void*)

     5.99%     0.00%  demo     libc.so.6             [.] 0x00007fcc060927f3
            |
            ---0x7fcc060927f3
               0x7fcc074235a9
               _dl_catch_exception
               0x7fcc06092e00
               0x7fcc0616a086
               |          
               |--3.13%--0x7fcc0742c8c2
               |          0x7fcc0742bc80
               |          
                --2.86%--0x7fcc0742cb6c
                          _dl_exception_create_format
                          ___interceptor_malloc
                          __sanitizer::InternalAlloc(unsigned long, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
                          __sanitizer_internal_memset

     5.99%     0.00%  demo     ld-linux-x86-64.so.2  [.] 0x00007fcc074235a9
            |
            ---0x7fcc074235a9
               _dl_catch_exception
               0x7fcc06092e00
               0x7fcc0616a086
               |          
               |--3.13%--0x7fcc0742c8c2
               |          0x7fcc0742bc80
               |          
                --2.86%--0x7fcc0742cb6c
                          _dl_exception_create_format
                          ___interceptor_malloc
                          __sanitizer::InternalAlloc(unsigned long, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
                          __sanitizer_internal_memset

     5.99%     0.00%  demo     libc.so.6             [.] 0x00007fcc06092e00
            |
            ---0x7fcc06092e00
               0x7fcc0616a086
               |          
               |--3.13%--0x7fcc0742c8c2
               |          0x7fcc0742bc80
               |          
                --2.86%--0x7fcc0742cb6c
                          _dl_exception_create_format
                          ___interceptor_malloc
                          __sanitizer::InternalAlloc(unsigned long, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
                          __sanitizer_internal_memset

     5.99%     0.00%  demo     libc.so.6             [.] 0x00007fcc0616a086
            |
            ---0x7fcc0616a086
               |          
               |--3.13%--0x7fcc0742c8c2
               |          0x7fcc0742bc80
               |          
                --2.86%--0x7fcc0742cb6c
                          _dl_exception_create_format
                          ___interceptor_malloc
                          __sanitizer::InternalAlloc(unsigned long, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
                          __sanitizer_internal_memset

     5.92%     0.00%  demo     libasan.so.8.0.0      [.] ___interceptor_malloc
            |
            ---___interceptor_malloc
               __sanitizer::InternalAlloc(unsigned long, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
               |          
               |--3.06%--__sanitizer::CombinedAllocator<__sanitizer::SizeClassAllocator32<__sanitizer::AP32>, __sanitizer::LargeMmapAllocatorPtrArrayStatic>::Allocate(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long, unsigned long)
               |          __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)
               |          __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::AllocateBatch(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
               |          __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::PopulateFreeList(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::SizeClassInfo*, unsigned long)
               |          
                --2.86%--__sanitizer_internal_memset

     5.65%     2.47%  demo     libasan.so.8.0.0      [.] __lsan::GetUserBegin(unsigned long)
            |          
            |--3.18%--__lsan::GetUserBegin(unsigned long)
            |          
             --2.47%--__sanitizer::internal_clone(int (*)(void*), void*, int, void*, int*, void*, int*)
                       __sanitizer::TracerThread(void*)
                       __lsan::CheckForLeaksCallback(__sanitizer::SuspendedThreadsList const&, void*)
                       __lsan::ForEachChunk(void (*)(unsigned long, void*), void*)
                       __lsan::CollectIgnoredCb(unsigned long, void*)
                       __lsan::GetUserBegin(unsigned long)

     4.50%     4.50%  demo     libasan.so.8.0.0      [.] __lsan::LsanMetadata::allocated() const
            |
            ---__sanitizer::internal_clone(int (*)(void*), void*, int, void*, int*, void*, int*)
               __sanitizer::TracerThread(void*)
               __lsan::CheckForLeaksCallback(__sanitizer::SuspendedThreadsList const&, void*)
               __lsan::ForEachChunk(void (*)(unsigned long, void*), void*)
               __lsan::LsanMetadata::allocated() const

     4.36%     4.36%  demo     libasan.so.8.0.0      [.] __lsan::LsanMetadata::LsanMetadata(unsigned long)
            |
            ---__sanitizer::internal_clone(int (*)(void*), void*, int, void*, int*, void*, int*)
               __sanitizer::TracerThread(void*)
               __lsan::CheckForLeaksCallback(__sanitizer::SuspendedThreadsList const&, void*)
               __lsan::ForEachChunk(void (*)(unsigned long, void*), void*)
               __lsan::LsanMetadata::LsanMetadata(unsigned long)

     3.24%     3.24%  demo     ld-linux-x86-64.so.2  [.] 0x000000000000af73
            |
            ---0x7fcc0743fb48
               0x7fcc07440ca1
               0x7fcc0743f5e6
               0x7fcc07442d23
               0x7fcc07432e21
               0x7fcc07430e10
               0x7fcc0742c8c2
               0x7fcc0742bf76

     3.24%     0.00%  demo     ld-linux-x86-64.so.2  [.] 0x00007fcc0742bf76
            |
            ---0x7fcc0742bf76

     3.20%     0.00%  demo     demo                  [.] _start
            |
            ---_start
               __libc_start_main
               0x7fcc06027675
               main
               void Tundra::LnkLst::add_to_end<int, (unsigned char)32>(Tundra::LnkLst::LinkedList<int, (unsigned char)32>*, int)
               void Tundra::LnkLst::add_to_end<int, (unsigned char)32>(Tundra::LnkLst::LinkedList<int, (unsigned char)32>*, int const*)
               void Tundra::LnkLst::Internal::check_and_handle_resize<int, (unsigned char)32>(Tundra::LnkLst::LinkedList<int, (unsigned char)32>*)
               void* Tundra::alloc_and_copy_aligned_mem<(unsigned char)32>(void const*, unsigned long long, unsigned long long)
               void* Tundra::alloc_aligned<(unsigned char)32>(unsigned long long)
               ___interceptor_posix_memalign
               __asan::asan_posix_memalign(void**, unsigned long, unsigned long, __sanitizer::BufferedStackTrace*)
               __asan::Allocator::Allocate(unsigned long, unsigned long, __sanitizer::BufferedStackTrace*, __asan::AllocType, bool)
               __sanitizer::CombinedAllocator<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >, __sanitizer::LargeMmapAllocatorPtrArrayDynamic>::Allocate(__sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >*, unsigned long, unsigned long)
               __sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >::Refill(__sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >::PerClass*, __sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >*, unsigned long)
               __sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >::GetFromAllocator(__sanitizer::AllocatorStats*, unsigned long, unsigned int*, unsigned long)
               0x7fcc0616e853

     3.20%     0.00%  demo     libc.so.6             [.] __libc_start_main
            |
            ---__libc_start_main
               0x7fcc06027675
               main
               void Tundra::LnkLst::add_to_end<int, (unsigned char)32>(Tundra::LnkLst::LinkedList<int, (unsigned char)32>*, int)
               void Tundra::LnkLst::add_to_end<int, (unsigned char)32>(Tundra::LnkLst::LinkedList<int, (unsigned char)32>*, int const*)
               void Tundra::LnkLst::Internal::check_and_handle_resize<int, (unsigned char)32>(Tundra::LnkLst::LinkedList<int, (unsigned char)32>*)
               void* Tundra::alloc_and_copy_aligned_mem<(unsigned char)32>(void const*, unsigned long long, unsigned long long)
               void* Tundra::alloc_aligned<(unsigned char)32>(unsigned long long)
               ___interceptor_posix_memalign
               __asan::asan_posix_memalign(void**, unsigned long, unsigned long, __sanitizer::BufferedStackTrace*)
               __asan::Allocator::Allocate(unsigned long, unsigned long, __sanitizer::BufferedStackTrace*, __asan::AllocType, bool)
               __sanitizer::CombinedAllocator<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >, __sanitizer::LargeMmapAllocatorPtrArrayDynamic>::Allocate(__sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >*, unsigned long, unsigned long)
               __sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >::Refill(__sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >::PerClass*, __sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >*, unsigned long)
               __sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >::GetFromAllocator(__sanitizer::AllocatorStats*, unsigned long, unsigned int*, unsigned long)
               0x7fcc0616e853

     3.20%     0.00%  demo     libc.so.6             [.] 0x00007fcc06027675
            |
            ---0x7fcc06027675
               main
               void Tundra::LnkLst::add_to_end<int, (unsigned char)32>(Tundra::LnkLst::LinkedList<int, (unsigned char)32>*, int)
               void Tundra::LnkLst::add_to_end<int, (unsigned char)32>(Tundra::LnkLst::LinkedList<int, (unsigned char)32>*, int const*)
               void Tundra::LnkLst::Internal::check_and_handle_resize<int, (unsigned char)32>(Tundra::LnkLst::LinkedList<int, (unsigned char)32>*)
               void* Tundra::alloc_and_copy_aligned_mem<(unsigned char)32>(void const*, unsigned long long, unsigned long long)
               void* Tundra::alloc_aligned<(unsigned char)32>(unsigned long long)
               ___interceptor_posix_memalign
               __asan::asan_posix_memalign(void**, unsigned long, unsigned long, __sanitizer::BufferedStackTrace*)
               __asan::Allocator::Allocate(unsigned long, unsigned long, __sanitizer::BufferedStackTrace*, __asan::AllocType, bool)
               __sanitizer::CombinedAllocator<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >, __sanitizer::LargeMmapAllocatorPtrArrayDynamic>::Allocate(__sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >*, unsigned long, unsigned long)
               __sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >::Refill(__sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >::PerClass*, __sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >*, unsigned long)
               __sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >::GetFromAllocator(__sanitizer::AllocatorStats*, unsigned long, unsigned int*, unsigned long)
               0x7fcc0616e853

     3.20%     0.00%  demo     demo                  [.] main
            |
            ---main
               void Tundra::LnkLst::add_to_end<int, (unsigned char)32>(Tundra::LnkLst::LinkedList<int, (unsigned char)32>*, int)
               void Tundra::LnkLst::add_to_end<int, (unsigned char)32>(Tundra::LnkLst::LinkedList<int, (unsigned char)32>*, int const*)
               void Tundra::LnkLst::Internal::check_and_handle_resize<int, (unsigned char)32>(Tundra::LnkLst::LinkedList<int, (unsigned char)32>*)
               void* Tundra::alloc_and_copy_aligned_mem<(unsigned char)32>(void const*, unsigned long long, unsigned long long)
               void* Tundra::alloc_aligned<(unsigned char)32>(unsigned long long)
               ___interceptor_posix_memalign
               __asan::asan_posix_memalign(void**, unsigned long, unsigned long, __sanitizer::BufferedStackTrace*)
               __asan::Allocator::Allocate(unsigned long, unsigned long, __sanitizer::BufferedStackTrace*, __asan::AllocType, bool)
               __sanitizer::CombinedAllocator<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >, __sanitizer::LargeMmapAllocatorPtrArrayDynamic>::Allocate(__sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >*, unsigned long, unsigned long)
               __sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >::Refill(__sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >::PerClass*, __sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >*, unsigned long)
               __sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >::GetFromAllocator(__sanitizer::AllocatorStats*, unsigned long, unsigned int*, unsigned long)
               0x7fcc0616e853

     3.20%     0.00%  demo     demo                  [.] void Tundra::LnkLst::add_to_end<int, (unsigned char)32>(Tundra::LnkLst::LinkedList<int, (unsigned char)32>*, int)
            |
            ---void Tundra::LnkLst::add_to_end<int, (unsigned char)32>(Tundra::LnkLst::LinkedList<int, (unsigned char)32>*, int)
               void Tundra::LnkLst::add_to_end<int, (unsigned char)32>(Tundra::LnkLst::LinkedList<int, (unsigned char)32>*, int const*)
               void Tundra::LnkLst::Internal::check_and_handle_resize<int, (unsigned char)32>(Tundra::LnkLst::LinkedList<int, (unsigned char)32>*)
               void* Tundra::alloc_and_copy_aligned_mem<(unsigned char)32>(void const*, unsigned long long, unsigned long long)
               void* Tundra::alloc_aligned<(unsigned char)32>(unsigned long long)
               ___interceptor_posix_memalign
               __asan::asan_posix_memalign(void**, unsigned long, unsigned long, __sanitizer::BufferedStackTrace*)
               __asan::Allocator::Allocate(unsigned long, unsigned long, __sanitizer::BufferedStackTrace*, __asan::AllocType, bool)
               __sanitizer::CombinedAllocator<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >, __sanitizer::LargeMmapAllocatorPtrArrayDynamic>::Allocate(__sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >*, unsigned long, unsigned long)
               __sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >::Refill(__sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >::PerClass*, __sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >*, unsigned long)
               __sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >::GetFromAllocator(__sanitizer::AllocatorStats*, unsigned long, unsigned int*, unsigned long)
               0x7fcc0616e853

     3.20%     0.00%  demo     demo                  [.] void Tundra::LnkLst::add_to_end<int, (unsigned char)32>(Tundra::LnkLst::LinkedList<int, (unsigned char)32>*, int const*)
            |
            ---void Tundra::LnkLst::add_to_end<int, (unsigned char)32>(Tundra::LnkLst::LinkedList<int, (unsigned char)32>*, int const*)
               void Tundra::LnkLst::Internal::check_and_handle_resize<int, (unsigned char)32>(Tundra::LnkLst::LinkedList<int, (unsigned char)32>*)
               void* Tundra::alloc_and_copy_aligned_mem<(unsigned char)32>(void const*, unsigned long long, unsigned long long)
               void* Tundra::alloc_aligned<(unsigned char)32>(unsigned long long)
               ___interceptor_posix_memalign
               __asan::asan_posix_memalign(void**, unsigned long, unsigned long, __sanitizer::BufferedStackTrace*)
               __asan::Allocator::Allocate(unsigned long, unsigned long, __sanitizer::BufferedStackTrace*, __asan::AllocType, bool)
               __sanitizer::CombinedAllocator<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >, __sanitizer::LargeMmapAllocatorPtrArrayDynamic>::Allocate(__sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >*, unsigned long, unsigned long)
               __sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >::Refill(__sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >::PerClass*, __sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >*, unsigned long)
               __sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >::GetFromAllocator(__sanitizer::AllocatorStats*, unsigned long, unsigned int*, unsigned long)
               0x7fcc0616e853

     3.20%     0.00%  demo     demo                  [.] void Tundra::LnkLst::Internal::check_and_handle_resize<int, (unsigned char)32>(Tundra::LnkLst::LinkedList<int, (unsigned char)32>*)
            |
            ---void Tundra::LnkLst::Internal::check_and_handle_resize<int, (unsigned char)32>(Tundra::LnkLst::LinkedList<int, (unsigned char)32>*)
               void* Tundra::alloc_and_copy_aligned_mem<(unsigned char)32>(void const*, unsigned long long, unsigned long long)
               void* Tundra::alloc_aligned<(unsigned char)32>(unsigned long long)
               ___interceptor_posix_memalign
               __asan::asan_posix_memalign(void**, unsigned long, unsigned long, __sanitizer::BufferedStackTrace*)
               __asan::Allocator::Allocate(unsigned long, unsigned long, __sanitizer::BufferedStackTrace*, __asan::AllocType, bool)
               __sanitizer::CombinedAllocator<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >, __sanitizer::LargeMmapAllocatorPtrArrayDynamic>::Allocate(__sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >*, unsigned long, unsigned long)
               __sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >::Refill(__sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >::PerClass*, __sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >*, unsigned long)
               __sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >::GetFromAllocator(__sanitizer::AllocatorStats*, unsigned long, unsigned int*, unsigned long)
               0x7fcc0616e853

     3.20%     0.00%  demo     demo                  [.] void* Tundra::alloc_and_copy_aligned_mem<(unsigned char)32>(void const*, unsigned long long, unsigned long long)
            |
            ---void* Tundra::alloc_and_copy_aligned_mem<(unsigned char)32>(void const*, unsigned long long, unsigned long long)
               void* Tundra::alloc_aligned<(unsigned char)32>(unsigned long long)
               ___interceptor_posix_memalign
               __asan::asan_posix_memalign(void**, unsigned long, unsigned long, __sanitizer::BufferedStackTrace*)
               __asan::Allocator::Allocate(unsigned long, unsigned long, __sanitizer::BufferedStackTrace*, __asan::AllocType, bool)
               __sanitizer::CombinedAllocator<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >, __sanitizer::LargeMmapAllocatorPtrArrayDynamic>::Allocate(__sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >*, unsigned long, unsigned long)
               __sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >::Refill(__sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >::PerClass*, __sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >*, unsigned long)
               __sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >::GetFromAllocator(__sanitizer::AllocatorStats*, unsigned long, unsigned int*, unsigned long)
               0x7fcc0616e853

     3.20%     0.00%  demo     demo                  [.] void* Tundra::alloc_aligned<(unsigned char)32>(unsigned long long)
            |
            ---void* Tundra::alloc_aligned<(unsigned char)32>(unsigned long long)
               ___interceptor_posix_memalign
               __asan::asan_posix_memalign(void**, unsigned long, unsigned long, __sanitizer::BufferedStackTrace*)
               __asan::Allocator::Allocate(unsigned long, unsigned long, __sanitizer::BufferedStackTrace*, __asan::AllocType, bool)
               __sanitizer::CombinedAllocator<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >, __sanitizer::LargeMmapAllocatorPtrArrayDynamic>::Allocate(__sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >*, unsigned long, unsigned long)
               __sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >::Refill(__sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >::PerClass*, __sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >*, unsigned long)
               __sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >::GetFromAllocator(__sanitizer::AllocatorStats*, unsigned long, unsigned int*, unsigned long)
               0x7fcc0616e853

     3.20%     0.00%  demo     libasan.so.8.0.0      [.] ___interceptor_posix_memalign
            |
            ---___interceptor_posix_memalign
               __asan::asan_posix_memalign(void**, unsigned long, unsigned long, __sanitizer::BufferedStackTrace*)
               __asan::Allocator::Allocate(unsigned long, unsigned long, __sanitizer::BufferedStackTrace*, __asan::AllocType, bool)
               __sanitizer::CombinedAllocator<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >, __sanitizer::LargeMmapAllocatorPtrArrayDynamic>::Allocate(__sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >*, unsigned long, unsigned long)
               __sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >::Refill(__sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >::PerClass*, __sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >*, unsigned long)
               __sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >::GetFromAllocator(__sanitizer::AllocatorStats*, unsigned long, unsigned int*, unsigned long)
               0x7fcc0616e853

     3.20%     0.00%  demo     libasan.so.8.0.0      [.] __asan::asan_posix_memalign(void**, unsigned long, unsigned long, __sanitizer::BufferedStackTrace*)
            |
            ---__asan::asan_posix_memalign(void**, unsigned long, unsigned long, __sanitizer::BufferedStackTrace*)
               __asan::Allocator::Allocate(unsigned long, unsigned long, __sanitizer::BufferedStackTrace*, __asan::AllocType, bool)
               __sanitizer::CombinedAllocator<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >, __sanitizer::LargeMmapAllocatorPtrArrayDynamic>::Allocate(__sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >*, unsigned long, unsigned long)
               __sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >::Refill(__sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >::PerClass*, __sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >*, unsigned long)
               __sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >::GetFromAllocator(__sanitizer::AllocatorStats*, unsigned long, unsigned int*, unsigned long)
               0x7fcc0616e853

     3.20%     0.00%  demo     libasan.so.8.0.0      [.] __asan::Allocator::Allocate(unsigned long, unsigned long, __sanitizer::BufferedStackTrace*, __asan::AllocType, bool)
            |
            ---__asan::Allocator::Allocate(unsigned long, unsigned long, __sanitizer::BufferedStackTrace*, __asan::AllocType, bool)
               __sanitizer::CombinedAllocator<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >, __sanitizer::LargeMmapAllocatorPtrArrayDynamic>::Allocate(__sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >*, unsigned long, unsigned long)
               __sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >::Refill(__sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >::PerClass*, __sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >*, unsigned long)
               __sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >::GetFromAllocator(__sanitizer::AllocatorStats*, unsigned long, unsigned int*, unsigned long)
               0x7fcc0616e853

     3.20%     0.00%  demo     libasan.so.8.0.0      [.] __sanitizer::CombinedAllocator<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >, __sanitizer::LargeMmapAllocatorPtrArrayDynamic>::Allocate(__sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >*, unsigned long, unsigned long)
            |
            ---__sanitizer::CombinedAllocator<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >, __sanitizer::LargeMmapAllocatorPtrArrayDynamic>::Allocate(__sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >*, unsigned long, unsigned long)
               __sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >::Refill(__sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >::PerClass*, __sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >*, unsigned long)
               __sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >::GetFromAllocator(__sanitizer::AllocatorStats*, unsigned long, unsigned int*, unsigned long)
               0x7fcc0616e853

     3.20%     0.00%  demo     libasan.so.8.0.0      [.] __sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >::Refill(__sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >::PerClass*, __sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >*, unsigned long)
            |
            ---__sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >::Refill(__sanitizer::SizeClassAllocator64LocalCache<__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> > >::PerClass*, __sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >*, unsigned long)
               __sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >::GetFromAllocator(__sanitizer::AllocatorStats*, unsigned long, unsigned int*, unsigned long)
               0x7fcc0616e853

     3.20%     0.00%  demo     libasan.so.8.0.0      [.] __sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >::GetFromAllocator(__sanitizer::AllocatorStats*, unsigned long, unsigned int*, unsigned long)
            |
            ---__sanitizer::SizeClassAllocator64<__asan::AP64<__sanitizer::LocalAddressSpaceView> >::GetFromAllocator(__sanitizer::AllocatorStats*, unsigned long, unsigned int*, unsigned long)
               0x7fcc0616e853

     3.20%     0.00%  demo     libc.so.6             [.] 0x00007fcc0616e853
            |
            ---0x7fcc0616e853

     3.13%     3.13%  demo     ld-linux-x86-64.so.2  [.] 0x000000000000ad51
            |
            ---0x7fcc0743fba0
               0x7fcc074273cf
               __asan::AsanInitFromRtl()
               __asan::AsanInitInternal() [clone .isra.0]
               __asan::InitializeAsanInterceptors()
               InitializeCommonInterceptors()
               __interception::InterceptFunction(char const*, unsigned long*, unsigned long, unsigned long)
               dlsym
               0x7fcc060927f3
               0x7fcc074235a9
               _dl_catch_exception
               0x7fcc06092e00
               0x7fcc0616a086
               0x7fcc0742c8c2
               0x7fcc0742bc80

     3.13%     0.00%  demo     ld-linux-x86-64.so.2  [.] 0x00007fcc0742bc80
            |
            ---0x7fcc0742bc80

     3.07%     3.07%  demo     libasan.so.8.0.0      [.] ioctl_init()
            |
            ---0x7fcc0743fba0
               0x7fcc074273cf
               __asan::AsanInitFromRtl()
               __asan::AsanInitInternal() [clone .isra.0]
               __asan::InitializeAsanInterceptors()
               InitializeCommonInterceptors()
               ioctl_init()

     3.06%     0.00%  demo     libc.so.6             [.] 0x00007fcc06092820
            |
            ---0x7fcc06092820
               ___interceptor_malloc
               __sanitizer::InternalAlloc(unsigned long, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
               __sanitizer::CombinedAllocator<__sanitizer::SizeClassAllocator32<__sanitizer::AP32>, __sanitizer::LargeMmapAllocatorPtrArrayStatic>::Allocate(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long, unsigned long)
               __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::Refill(__sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >::PerClass*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>*, unsigned long)
               __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::AllocateBatch(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
               __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::PopulateFreeList(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::SizeClassInfo*, unsigned long)

     2.93%     2.93%  demo     ld-linux-x86-64.so.2  [.] 0x000000000000b8c2
            |
            ---0x7fcc0743fb48
               0x7fcc07440ca1
               0x7fcc0743f5e6
               0x7fcc07442d23
               0x7fcc07432e21
               0x7fcc07430e10
               0x7fcc0742c8c6

     2.93%     0.00%  demo     ld-linux-x86-64.so.2  [.] 0x00007fcc0742c8c6
            |
            ---0x7fcc0742c8c6

     2.86%     2.86%  demo     libasan.so.8.0.0      [.] __sanitizer_internal_memset
            |
            ---0x7fcc0743fba0
               0x7fcc074273cf
               __asan::AsanInitFromRtl()
               __asan::AsanInitInternal() [clone .isra.0]
               __asan::InitializeAsanInterceptors()
               InitializeCommonInterceptors()
               __interception::InterceptFunction(char const*, unsigned long*, unsigned long, unsigned long)
               dlsym
               0x7fcc060927f3
               0x7fcc074235a9
               _dl_catch_exception
               0x7fcc06092e00
               0x7fcc0616a086
               0x7fcc0742cb6c
               _dl_exception_create_format
               ___interceptor_malloc
               __sanitizer::InternalAlloc(unsigned long, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
               __sanitizer_internal_memset

     2.86%     0.00%  demo     ld-linux-x86-64.so.2  [.] 0x00007fcc0742cb6c
            |
            ---0x7fcc0742cb6c
               _dl_exception_create_format
               ___interceptor_malloc
               __sanitizer::InternalAlloc(unsigned long, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
               __sanitizer_internal_memset

     2.86%     0.00%  demo     ld-linux-x86-64.so.2  [.] _dl_exception_create_format
            |
            ---_dl_exception_create_format
               ___interceptor_malloc
               __sanitizer::InternalAlloc(unsigned long, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, unsigned long)
               __sanitizer_internal_memset

     2.59%     2.59%  demo     ld-linux-x86-64.so.2  [.] 0x000000000000b7b6
            |
            ---0x7fcc0743fb48
               0x7fcc07440ca1
               0x7fcc0743f5e6
               0x7fcc07442d23
               0x7fcc07432e21
               0x7fcc07430e10
               0x7fcc0742c7bb

     2.59%     0.00%  demo     ld-linux-x86-64.so.2  [.] 0x00007fcc0742c7bb
            |
            ---0x7fcc0742c7bb

     2.21%     2.21%  demo     ld-linux-x86-64.so.2  [.] 0x000000000000b7d0
            |
            ---0x7fcc0743fb48
               0x7fcc07440ca1
               0x7fcc0743f5e6
               0x7fcc07442d23
               0x7fcc07432e21
               0x7fcc07430e10
               0x7fcc0742c7d4

     2.21%     0.00%  demo     ld-linux-x86-64.so.2  [.] 0x00007fcc0742c7d4
            |
            ---0x7fcc0742c7d4

     2.11%     2.11%  demo     libasan.so.8.0.0      [.] __sanitizer::LargeMmapAllocator<__asan::AsanMapUnmapCallback, __sanitizer::LargeMmapAllocatorPtrArrayDynamic, __sanitizer::LocalAddressSpaceView>::GetBlockBeginFastLocked(void const*)
            |
            ---__sanitizer::internal_clone(int (*)(void*), void*, int, void*, int*, void*, int*)
               __sanitizer::TracerThread(void*)
               __lsan::CheckForLeaksCallback(__sanitizer::SuspendedThreadsList const&, void*)
               dl_iterate_phdr
               __lsan::ProcessGlobalRegionsCallback(dl_phdr_info*, unsigned long, void*)
               __lsan::ScanGlobalRange(unsigned long, unsigned long, __sanitizer::InternalMmapVector<unsigned long>*)
               void __lsan::ScanForPointers<__lsan::(anonymous namespace)::DirectMemoryAccessor>(unsigned long, unsigned long, __sanitizer::InternalMmapVector<unsigned long>*, char const*, __lsan::ChunkTag, __lsan::(anonymous namespace)::DirectMemoryAccessor&) [clone .isra.0]
               __sanitizer::LargeMmapAllocator<__asan::AsanMapUnmapCallback, __sanitizer::LargeMmapAllocatorPtrArrayDynamic, __sanitizer::LocalAddressSpaceView>::GetBlockBeginFastLocked(void const*)

     1.83%     1.83%  demo     ld-linux-x86-64.so.2  [.] 0x000000000000fcfc
            |
            ---0x7fcc0743fb48
               0x7fcc07440ca1
               0x7fcc0743f5e6
               0x7fcc07442d23
               0x7fcc07432e21
               0x7fcc07430d00

     1.83%     0.00%  demo     ld-linux-x86-64.so.2  [.] 0x00007fcc07430d00
            |
            ---0x7fcc07430d00

     1.33%     1.33%  demo     ld-linux-x86-64.so.2  [.] 0x000000000000fd4c
            |
            ---0x7fcc0743fb48
               0x7fcc07440ca1
               0x7fcc0743f5e6
               0x7fcc07442d23
               0x7fcc07432e21
               0x7fcc07430d52

     1.33%     0.00%  demo     ld-linux-x86-64.so.2  [.] 0x00007fcc07430d52
            |
            ---0x7fcc07430d52

     1.04%     1.04%  demo     ld-linux-x86-64.so.2  [.] 0x000000000000af60
            |
            ---0x7fcc0743fb48
               0x7fcc07440ca1
               0x7fcc0743f5e6
               0x7fcc07442d23
               0x7fcc07432e21
               0x7fcc07430e10
               0x7fcc0742c8c2
               0x7fcc0742bf64

     1.04%     0.00%  demo     ld-linux-x86-64.so.2  [.] 0x00007fcc0742bf64
            |
            ---0x7fcc0742bf64

     0.84%     0.84%  demo     ld-linux-x86-64.so.2  [.] 0x0000000000026d84
            |
            ---0x7fcc0743fb48
               0x7fcc07440ca1
               0x7fcc0743f5e6
               0x7fcc074429b0
               0x7fcc07424ca3
               _dl_catch_exception
               0x7fcc0742483d
               0x7fcc0742b870
               0x7fcc0742ac72
               0x7fcc07447d88

     0.84%     0.84%  demo     ld-linux-x86-64.so.2  [.] 0x00000000000268f0
            |
            ---0x7fcc0743fb48
               0x7fcc07440ca1
               0x7fcc0743f5e6
               0x7fcc07442b0d
               0x7fcc07423359
               0x7fcc07440344
               0x7fcc074366c0
               0x7fcc074478f3

     0.84%     0.00%  demo     ld-linux-x86-64.so.2  [.] 0x00007fcc074429b0
            |
            ---0x7fcc074429b0
               0x7fcc07424ca3
               _dl_catch_exception
               0x7fcc0742483d
               0x7fcc0742b870
               0x7fcc0742ac72
               0x7fcc07447d88

     0.84%     0.00%  demo     ld-linux-x86-64.so.2  [.] 0x00007fcc07424ca3
            |
            ---0x7fcc07424ca3
               _dl_catch_exception
               0x7fcc0742483d
               0x7fcc0742b870
               0x7fcc0742ac72
               0x7fcc07447d88

     0.84%     0.00%  demo     ld-linux-x86-64.so.2  [.] 0x00007fcc07442b0d
            |
            ---0x7fcc07442b0d
               0x7fcc07423359
               0x7fcc07440344
               0x7fcc074366c0
               0x7fcc074478f3

     0.84%     0.00%  demo     ld-linux-x86-64.so.2  [.] 0x00007fcc07423359
            |
            ---0x7fcc07423359
               0x7fcc07440344
               0x7fcc074366c0
               0x7fcc074478f3

     0.84%     0.00%  demo     ld-linux-x86-64.so.2  [.] 0x00007fcc0742483d
            |
            ---0x7fcc0742483d
               0x7fcc0742b870
               0x7fcc0742ac72
               0x7fcc07447d88

     0.84%     0.00%  demo     ld-linux-x86-64.so.2  [.] 0x00007fcc0742b870
            |
            ---0x7fcc0742b870
               0x7fcc0742ac72
               0x7fcc07447d88

     0.84%     0.00%  demo     ld-linux-x86-64.so.2  [.] 0x00007fcc07440344
            |
            ---0x7fcc07440344
               0x7fcc074366c0
               0x7fcc074478f3

     0.84%     0.00%  demo     ld-linux-x86-64.so.2  [.] 0x00007fcc0742ac72
            |
            ---0x7fcc0742ac72
               0x7fcc07447d88

     0.84%     0.00%  demo     ld-linux-x86-64.so.2  [.] 0x00007fcc074366c0
            |
            ---0x7fcc074366c0
               0x7fcc074478f3

     0.84%     0.00%  demo     ld-linux-x86-64.so.2  [.] 0x00007fcc074478f3
            |
            ---0x7fcc074478f3

     0.84%     0.00%  demo     ld-linux-x86-64.so.2  [.] 0x00007fcc07447d88
            |
            ---0x7fcc07447d88

     0.81%     0.81%  demo     ld-linux-x86-64.so.2  [.] 0x000000000000ad16
            |
            ---0x7fcc0743fb48
               0x7fcc07440ca1
               0x7fcc0743f5e6
               0x7fcc07442c79
               0x7fcc07432e21
               0x7fcc07430e10
               0x7fcc0742c8c2
               0x7fcc0742bd1a

     0.81%     0.00%  demo     ld-linux-x86-64.so.2  [.] 0x00007fcc07442c79
            |
            ---0x7fcc07442c79
               0x7fcc07432e21
               0x7fcc07430e10
               0x7fcc0742c8c2
               0x7fcc0742bd1a

     0.81%     0.00%  demo     ld-linux-x86-64.so.2  [.] 0x00007fcc0742bd1a
            |
            ---0x7fcc0742bd1a

     0.80%     0.00%  demo     ld-linux-x86-64.so.2  [.] 0x00007fcc074306e3
            |
            ---0x7fcc074306e3



#
# (Tip: To see callchains in a more compact form: perf report -g folded)
#
